function [normalized_input, target] = normalize_input(input_data, total_noise)
    normalized_input = zeros(size(input_data, 2), 28);
    target = zeros(size(normalized_input, 1), 16);    

    for i = 1:size(input_data, 2)
        input_matrix = vec2mat(input_data(:, i), 7);
        pos_x = ceil(size(input_matrix, 2) / 2);
        pos_y = ceil(size(input_matrix, 2) / 2);
        
        normalized_input(i, :) = [ ... 
            sum((input_matrix(1:pos_y, 1:pos_x) .* 2), 1), ... 
            sum(input_matrix(1:pos_y, pos_x+1:size(input_matrix,2)), 1), ...
            sum(input_matrix(pos_y+1:size(input_matrix, 1), 1:pos_x), 1), ...
            sum((input_matrix(pos_y+1:size(input_matrix, 1), pos_x+1:size(input_matrix,2)) .* 2), 1), ...
            sum((input_matrix(1:pos_y, 1:pos_x) .* 2), 2)', ...
            sum(input_matrix(1:pos_y, pos_x+1:size(input_matrix,2)), 2)', ...
            sum(input_matrix(pos_y+1:size(input_matrix, 1), 1:pos_x), 2)', ...
            sum((input_matrix(pos_y+1:size(input_matrix, 1), pos_x+1:size(input_matrix,2)) .* 2), 2)' ];
        %target(i) = floor((i - 1) / (total_noise + 1)) / 10;
        target(i, floor((i - 1) / (total_noise + 1)) + 1) = 1;
    end
    normalized_input(normalized_input == 0) = -1;
end